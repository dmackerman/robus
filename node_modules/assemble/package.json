{
  "name": "assemble",
  "description": "Assemble makes it dead simple to build modular sites and components from reusable templates and data.",
  "version": "0.3.78",
  "homepage": "https://github.com/assemble/assemble",
  "author": {
    "name": "assemble",
    "url": "https://github.com/assemble/assemble"
  },
  "contributors": [
    {
      "name": "Brian Woodward",
      "url": "https://github.com/doowb"
    },
    {
      "name": "Jon Schlinkert",
      "url": "https://github.com/jonschlinkert"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/assemble/assemble.git"
  },
  "bugs": {
    "url": "git://github.com/assemble/assemble/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/assemble/assemble/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./lib/assemble",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "lodash": "~1.1.1",
    "marked": "~0.2.8",
    "highlight.js": "~7.3.0",
    "assemble-handlebars": "https://github.com/assemble/assemble-handlebars/tarball/master",
    "inflection": "~1.2.5",
    "js-yaml": "~2.0.5"
  },
  "devDependencies": {
    "chai": "~1.5.0",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.1.0",
    "grunt-mocha-test": "~0.2.0"
  },
  "keywords": [
    "blog generator",
    "blog",
    "boilerplate",
    "boilerplates",
    "bootstrap",
    "build and deployment",
    "build bootstrap",
    "build system",
    "build",
    "builder",
    "compile",
    "compiler",
    "components",
    "conventions",
    "deploy",
    "example handlebars",
    "framework",
    "generator",
    "gh-pages",
    "grunt task",
    "grunt",
    "gruntplugin",
    "handlebars",
    "helpers",
    "jekyll alternative",
    "jekyll static",
    "jekyll",
    "json",
    "mock",
    "mocking",
    "modules",
    "mustache",
    "node blog",
    "node jekyll",
    "parse",
    "parser",
    "partial",
    "partials",
    "pre-processor",
    "preprocessor",
    "render",
    "renderer",
    "scaffold",
    "scaffolds",
    "site builder",
    "site generator",
    "site generators",
    "static HTML",
    "static site",
    "templates",
    "templating",
    "theme",
    "themes",
    "tool",
    "toolkit",
    "utility",
    "web development",
    "web framework",
    "yaml front matter",
    "yaml"
  ],
  "readme": "# [Assemble v0.3.78](http://github.com/assemble/assemble) [![Build Status](https://travis-ci.org/assemble/assemble.png)](https://travis-ci.org/assemble/assemble)\n\n> Assemble makes it dead simple to build modular sites and components from reusable templates and data.\n\n_This project just launched **so expect frequent changes**._ We love contributors, pull requests are welcome and followers are appreciated.\n\nVisit the [assemble-examples](http://github.com/assemble/assemble-examples) repo to see a list of example projects, such as:\n\n* [assembling a basic site](http://github.com/assemble/assemble-examples-basic) \n* [building a readme from templates](http://github.com/assemble/assemble-examples-readme): more useful for large or multi-projects, wikis etc.\n* [generating a sitemap](http://github.com/assemble/assemble-examples-sitemap) \n\n\n**Table of Contents**\n\n- [Getting started](#getting-started)\n- [The \"assemble\" task](#the-assemble-task)\n- [Options](#options)\n- [Task Examples](#task-examples)\n- [Usage Examples](#usage-examples)\n- [Methods](#methods)\n\n\n## Getting started\n> It amazes me how flexible this whole system is, as we can dance   \n> around all the issues quite easily.  \n> -- [@Arkkimaagi](https://github.com/Arkkimaagi)\n\nIf you're having trouble getting started, please [create an Issue](https://github.com/assemble/assemble/issues), we're happy to help.\n\n\nThis plugin requires Grunt `~0.4.1`. If you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install assemble --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your [Gruntfile][Getting Started] with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('assemble');\n```\n\n\n\n## The \"assemble\" task\nIn your project's Gruntfile, add a section named `assemble` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  assemble: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    }\n  }\n});\ngrunt.loadNpmTasks('assemble');\n\ngrunt.registerTask('default', [\n  'jshint',\n  'assemble'\n]);\n```\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\n\n## Options\nSee the [Options](https://github.com/assemble/assemble/wiki/Options) section on the Wiki for more information.\n\n#### assets\nType: `String`\nDefault: `undefined`\n\nUsed with the `{{assets}}` variable to resolve the relative path from the _dest file_ to the _assets_ folder.\n\n#### data\nType: `Object|Array`\nDefault: `src/data`\n\nRetrieves data from any specified `JSON` and/or `YAML` files to populate the templates when rendered. Data gets passed through the `data` object to the options on the assemble task, then to the context in your templates. \n\nAlso useful for specifying [configuration][config] data, such as when to render certain templates. For example:\n\nAlso see: [YAML front matter][yaml]\n\n#### layout\nType: `String`\nDefault: `undefined`\n\nIf set, this defines the layout file to use for the [task or target][tasks-and-targets]. However, when specifying a layout, unlike Jekyll, _Assemble requires a file extension_ since you are not limited to using a single file type. \n\n[tasks-and-targets]: http://gruntjs.com/configuring-tasks#task-configuration-and-targets\n\n#### partials\nType:  `Object|Array`\nDefault: `undefined`\n\nSpecifies the Handlebars partials files, or paths to the directories of files to be used. \n\n#### helpers\nType: `Object|Array`\nDefault: [helper-lib](http://github.com/assemble/helper-lib)\n\nPath defined to a directory of custom helpers to use with the specified template engine. Assemble currently includes more than **[100+ built-in Handlebars helpers](https://github.com/assemble/helper-lib)**, since Handlebars is the default engine for Assemble.\n\n#### ext\nType: `String`\nDefault: `.html`\n\nSpecify the file extension for destination files. Example:\n\nMore [info about ext][options].\n\n#### flatten\nType: `Boolean`\nDefault: `false`\n\nRemove anything after (and including) the first \".\" in the destination path, then append this value. In other words, when files are generated from different source folders this \"flattens\" them into the same destination directory. See [building the files object dynamically][files-object] for more information on `files` formats.\n\n\n### Custom \"Options Variables\"\n\nYou can add any custom variables directly to the options block:\n\n``` javascript\nassemble {\n  myProject: {\n    options: {\n      custom_option1: 'value',\n      custom_option2: 'value'\n    },\n    files: {\n      'dest': ['src/templates*.hbs']\n    }\n  }\n}\n```\nThis offers a great deal of flexibility, but it's also something that should be done sparingly because your tasks and targets can get out of hand pretty quickly. \n\nHere are a couple of common use cases for custom options variables:\n\n**development stages**\n\nAdd custom variables for development stages, such as `dev` and `prod`:\n\n``` javascript\nassemble {\n  myProject: {\n    options: {\n      dev: true,\n      prod: false\n    },\n    files: {\n      'dest': ['src/templates*.hbs']\n    }\n  }\n}\n```\n\nThen we can wrap sections in our templates with these contexts to include or exclude content based on truthy or falsy evalution of the `dev` and `prod` variables.\n\n``` hbs\n{{#dev}}\n  <script src=\"script.js\"></script>\n{{/dev}}\n{{#prod}}\n  <script src=\"script.min.js\"></script>\n{{/prod}}\n```\n\n\n**version consistency**\n\nGet or set metadata to/from `package.json`:\n\n``` javascript\npkg: grunt.file.readJSON('package.json'),\n\nassemble {\n  myProject: {\n    options: {\n      version: '<%= pkg.version %>'\n    },\n    files: {\n      'dest': ['src/templates*.hbs']\n    }\n  }\n}\n```\nUsed in our templates like this: `{{version}}`\n\n**NOTE**: It's worth noting that you can accomplish the same end goal by using the `options.data` object instead of creating a custom \"options variable\". See the [options.data](https://github.com/assemble/assemble/wiki/Options) page in the wiki for more detail.\n\n\n\n## [Task Examples](http://github.com/assemble/assemble-examples)\nVisit the [assemble-examples](http://github.com/assemble/assemble-examples) repo to see a list of example projects.\n\n#### Compile Handlebars templates\n\nSimple example of using data files in both `.json` and `.yml` format to build Handlebars templates.\n\n```javascript\nassemble: {\n  docs: {\n    options: {\n      data: 'src/data/**/*.{json,yml}'\n    },\n    files: {\n      'dist/': ['src/templates/**/*.hbs']\n    }\n  }\n}\n```\n\n#### Generate a markdown README\n\nThe example shows how you can use Assemble to generate a markdown formatted readme from Handlebars templates. \n\n```javascript\nassemble: {\n  readme: {\n    options: {\n      flatten: true,\n      partials: 'src/content/*.hbs',\n      data: 'package.json',\n      ext: ''\n    },\n    src:  'src/templates/README.md.hbs',\n    dest: './'\n  }\n}\n```\nVisit the [assemble-examples-readme](http://github.com/assemble/assemble-examples-readme) repo to see a working example.\n\n\n#### Generate `.xml` sitemap\n\nYou can generate a sitemap from a static data source, such as `sitemap.json`, or use Assemble's built-in `pages` and `page` variables to automatically generate a sitemap from all pages in a target.\n\n```javascript\nassemble: {\n  options: {\n    flatten: true,\n    data: 'src/sitemap.json',\n    ext: '.xml'\n  },\n  component: {\n    files: {\n      'Sitemap.xml': ['src/sitemap.hbs']\n    }\n  }\n}\n```\n\n\n## [Usage Examples](http://github.com/assemble/assemble-examples)\n\nLet's start by creating a template, which can be any kind of markdown, text, xml or markup/HTML that we want to use. For this example our template is going to be HTML, and since I'm feeling creative let's call it `my-template.hbs`. \n\nNow, focusing only on the `head` of our HTML document, let's add template variables for `title` and `author` so that we can later replace them with real data:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>{{title}}</title>\n    <meta name=\"author\" content=\"{{author}}\">\n  </head>\n  <body>\n  </body>\n</html>\n```\n\nHandlebars.js is the default template engine in Assemble, so our variables are wrapped in \"Handlebars expressions\": `{{` and `}}`. \n\n### Data\n\nFor data we can mix and match any of the following formats: \n\n* [JSON]() files, such as `my-data.json`\n* [YAML]() files, such as `my-data.yml`\n* [YAML Front-Matter](), embedded directly inside the template itself\n\nWhen working with \"external\" data files, if we name our file the same as our template, and we add the path to the data file to the `options.data` object in the `assemble` task, then Assemble will pick it up and use it automatically.  \n\n#### JSON example\n\nHere is an example of what we might put inside of `my-template.json` to populate our template with data.\n\n```json\n{\n  \"title\": \"Assemble\",\n  \"author\": \"Brian Woodward\"\n}\n```\n#### YAML example\n\nHere is the same in YAML format: `my-template.yml`\n``` yaml\ntitle: Assemble\nauthor: Brian Woodward\n```\n\nAnd this template: \n\n`my-template.hbs`\n```\n<h1>{{ title }}</h1>\n```\n\n#### YAML front-matter example\n\nOr, in cases where we only require simple metadata we can use YAML Front-matter to eliminate the need for an external data file:\n\n``` yaml\n---\ntitle: Assemble\nauthor: Brian Woodward\n---\n\n<h1>{{ title }}</h1>\n```\n\nOutputs:\n\n```html\n<h1>Assemble</h1>\n<p>Brian Woodward</p>\n```\n\n#### Underscore and yaml front-matter\n\nFurthermore, we can optionally use underscore templates in the YAML front-matter to translate external variables into data inside the content:\n\n``` yaml\n---\ntitle: <%= some.title.variable %>\nauthor: <%= some.author.variable %>\n---\n\n<h1>{{ title }}</h1>\n<p>{{ author }}</p>\n```\n\n\n\n\n## Methods\n## `init` method\n\nDescribes `init` method to `assemble.engine`, and exposes engine on `assemble.engine`.\n\n\n## Custom Engines\n\nIf you don't wish to use Handlebars as your templates engine, you may add your own engine by providing an init function that takes in options from the assemble task/target. You may also override the `init` function in the task/target options by providing an `initializeEngine` function that takes the engine and the options:\n\n```js\nassemble: {\n  options: {\n    engine: 'consolidate',\n    initializeEngine: function(engine, options) {\n      engine.engine.swig.init(options);\n    }\n  },\n  docs: {\n    files: {\n      'docs/': ['src/templates/**/*.tmpl']\n    }\n  }\n}\n```\n\nAssemble will attempt to load an engine and automatically add it's own wrapper methods around it while holding an instance of the engine. This is a way for engine plugin authors to write adapters between other engines and assemble's wrapper. To make these functions on the options useful, we've exposed the underlying engine through the `assemble.engine` object so **developers can use the raw engine**. \n\nThis is particularly useful when **a)** a library such as [consolidate][] is used, where the engine is `consolidate`, and **b)** the developer wants to use another engine such as [handlebars](https://github.com/wycats/handlebars.js), [swig](https://github.com/paularmstrong/swig), [mustache](https://github.com/janl/mustache.js) etc.\n\n* The `init` function allows assemble to pass in options to be used in initializing this engine plugin.\n* `init` function is exposed, and [helper-lib](https://github.com/assemble/helper-lib) is registered inside the init so that options can be passed in.\n\nAdmittedly, the `engine.engine` syntax is strange. This is \"alpha\", so feedback and pull requests are especially welcome if you have ideas for improving this.\n\n\n### Register Helpers\n\nCall `registerFunctions`, to register custom helpers or \"filters\", by passing in an engine:\n\n```javascript\nregisterFunctions(assemble.engine);\n```\n\nExample of how this would be setup in the `options` of the assemble task or target:\n\n```javascript\nassemble: {\n  options: {\n    registerFunctions: function(engine) {\n      var helperFunctions = {};\n      helperFunctions['foo'] = function() { return 'bar'; };\n      engine.registerFunctions(helperFunctions);\n    }\n  },\n  site: {\n    files: {\n      'dist/': ['src/templates/**/*.tmpl']\n    }\n  }\n}\n```\n\n### Register Partials\n\nCall `registerPartial` by passing in an engine.\n\n```javascript\nregisterPartial(assemble.engine, 'partialName', content);\n```\n\nExample of how this would be setup in the `options` of the assemble task or target:\n\n```javascript\nassemble: {\n  options: {\n    registerPartial: function(engine, name, content) {\n      var tmpl = engine.compile(content);\n      engine.registerPartial(name, tmpl);\n    }\n  },\n  blog: {\n    files: {\n      'dist/blog/': ['src/templates/**/*.tmpl']\n    }\n  }\n}\n```\n\n[consolidate]: https://github.com/visionmedia/consolidate.js/\n\n\n### assemble object\n\nMethods to the assemble object can be created using:\n\n```javascript\nvar assemble = require('assemble').init(this);\n```\n  * the `this` object is from the grunt task, and can be accessed in assemble \"steps\" through `assemble.task`\n  * the `init` method does some initial option configuration and sets the following properties on the assemble object:\n\n\n```javascript\nassemble.task;    // refers to the grunt task\nassemble.options; // refers to the task.options merged with assemble defaults\nassemble.files;   // refers to the task.files\n```\n \n### assemble steps\n\nThere are also methods to setup the assemble steps, and then execute the build:\n\nThe `step` function takes a function which takes 2 parameters `function(assemble, next)`:\n\n  1. `assemble` is the actual assemble object\n  2. `next` is a callback function that needs to be called when finished executing this step\n\n\nSee the following example:\n\n```javascript\nassemble.step(function(assemble, next) {\n  // do some code here\n  // you can add properties to assemble which can be accessed in later steps\n  assemble.myCustomProperty = { foo: 'bar' };\n\n  // always call next when finished and pass back the assemble object\n  next(assemble);\n});\n```\n\n#### the `step` function\n\nThe `step` function also returns the current assemble object so it's chainable...\n\n```javascript\nvar assemble = require('assemble').init(this)\n    .step(step1)\n    .step(step2)\n    .step(step3)\n    .build(done);\n````\n\n#### the `build` function\n\nThe `build` function takes a callback that is called when the build process is complete. The build process calls the steps that were previously setup, passing in the `assemble` object.\n\n```javascript\nassemble.build(function(err, result) {\n  if(err) {\n    console.log(err);\n    return;\n  }\n  console.log('finished building');\n});\n```\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Please lint and test your code using Grunt.\n\n## Authors\n\n**Jon Schlinkert**\n\n+ [http://twitter.com/jonschlinkert](http://twitter.com/jonschlinkert)\n+ [http://github.com/jonschlinkert](http://github.com/jonschlinkert)\n\n**Brian Woodward**\n\n+ [http://twitter.com/doowb](http://twitter.com/doowb)\n+ [http://github.com/doowb](http://github.com/doowb)\n\n\n## Copyright and license\nCopyright 2013 Assemble\n\n[MIT License](LICENSE-MIT)\n\n## Release History\n* 2013-05-07\t\t\tv0.3.77\t\t\tUpdated README with info about assemble methods\n* 2013-04-28\t\t\tv0.3.74\t\t\tUpdating the assemble library to use the assemble-utils repo and unnecessary code.\n* 2013-04-21\t\t\tv0.3.73\t\t\tFixing how the relative path helper worked and showing an example in the footer of the layout. This example is hidden, but can be seen by doing view source.\n* 2013-04-20\t\t\tv0.3.72\t\t\tFixing the layout override issue happening in the page yaml headers. Something was missed during refactoring.\n* 2013-04-19\t\t\tv0.3.9\t\t\tAdding tags and categories to the root context and ensure that the current page context values don't override the root context values.\n* 2013-04-18\t\t\tv0.3.8\t\t\tUpdating to use actual assets property from current page.\n* 2013-04-17\t\t\tv0.3.7\t\t\tCleaning up some unused folders and tests\n* 2013-04-16\t\t\tv0.3.6\t\t\tFixed missing assets property.\n* 2013-04-16\t\t\tv0.3.5\t\t\tAdding a sections array to the template engine so it can be used in helpers.\n* 2013-04-11\t\t\tv0.3.4\t\t\tMore tests for helpers and global variables, organized tests. A number of bug fixes.\n* 2013-04-06\t\t\tv0.3.3\t\t\thelper-lib properly externalized and wired up. Global variables for filename, ext and pages\n* 2013-03-22\t\t\tv0.3.22\t\t\tMerged global and target level options so data and partial files can be joined\n* 2013-03-22\t\t\tv0.3.21\t\t\tValid YAML now allowed in options.data object (along with JSON)\n* 2013-03-18\t\t\tv0.3.14\t\t\tnew relative helper for resolving relative paths\n\n\n\n---\n\n_This file was generated using Grunt and [assemble](http://github.com/assemble/assemble) on Wed May 22 2013 16:44:26._\n\n\n\n\n[download]: https://github.com/assemble/assemble/zipball/master\n\n\n[org]: https://github.com/assemble\n[assemble]: https://github.com/assemble/assemble\n[issues]: https://github.com/assemble/assemble/issues\n[wiki]: https://github.com/assemble/assemble/wiki\n\n\n\n[config]: https://github.com/assemble/assemble/wiki/Configuration\n[gruntfile]: https://github.com/assemble/assemble/wiki/Gruntfile\n[tasks]: https://github.com/assemble/assemble/wiki/Task-and-Targets\n[options]: https://github.com/assemble/assemble/wiki/Options\n\n\n[templates]: https://github.com/assemble/assemble/wiki/Templates\n[layouts]: https://github.com/assemble/assemble/wiki/Layouts\n[pages]: https://github.com/assemble/assemble/wiki/Pages\n[partials]: https://github.com/assemble/assemble/wiki/Partials\n\n\n[content]: https://github.com/assemble/assemble/wiki/Content\n[data]: https://github.com/assemble/assemble/wiki/Data\n[yaml]: https://github.com/assemble/assemble/wiki/YAML-front-matter\n[markdown]: https://github.com/assemble/assemble/wiki/Markdown\n\n\n[helpers]: https://github.com/assemble/assemble/wiki/Helpers\n[assets]: https://github.com/assemble/assemble/wiki/Assets\n[collections]: https://github.com/assemble/assemble/wiki/Collections\n\n\n[examples]: https://github.com/assemble/assemble-examples\n[exampleReadme]: https://github.com/assemble/assemble-examples-readme\n[exampleBasic]: https://github.com/assemble/assemble-examples-basic\n[exampleAdvanced]: https://github.com/assemble/assemble-examples-advanced\n[exampleGrid]: https://github.com/assemble/assemble-examples-grid\n[exampleTable]: https://github.com/assemble/assemble-examples-table\n[exampleForm]: https://github.com/assemble/assemble-examples-form\n[exampleSite]: https://github.com/assemble/assemble-examples-site\n[exampleSitemap]: https://github.com/assemble/assemble-examples-sitemap\n\n\n[contribute]: https://github.com/assemble/assemble/wiki/Contributing-to-Assemble\n[extend]: https://github.com/assemble/assemble/wiki/Extending-Assemble\n[helpers-lib]: https://github.com/assemble/assemble/wiki/Helpers\n\n\n[grunt]: http://gruntjs.com/\n[upgrading]: http://gruntjs.com/upgrading-from-0.3-to-0.4\n[getting-started]: http://gruntjs.com/getting-started\n[package]: https://npmjs.org/doc/json.html\n\n\n[assemble]: https://github.com/assemble/assemble\n[pre]: https://github.com/assemble/pre\n[dry]: https://github.com/assemble/dry\n[assemble-github-com]: https://github.com/assemble/assemble.github.com\n[assemble-examples-bootstrap]: https://github.com/assemble/assemble-examples-bootstrap\n[assemble-internal]: https://github.com/assemble/assemble-internal\n[assemble-less]: https://github.com/assemble/assemble-less\n[assemble-examples-readme]: https://github.com/assemble/assemble-examples-readme\n[grunt-toc]: https://github.com/assemble/grunt-toc\n[helper-lib]: https://github.com/assemble/helper-lib\n[grunt-dry]: https://github.com/assemble/grunt-dry\n[assemble-examples]: https://github.com/assemble/assemble-examples\n\n",
  "readmeFilename": "README.md",
  "_id": "assemble@0.3.78",
  "dist": {
    "shasum": "962845d3e4607bd413128d0110af9fe2c7a377d2"
  },
  "_from": "assemble@~0.3.77",
  "_resolved": "https://registry.npmjs.org/assemble/-/assemble-0.3.78.tgz"
}
